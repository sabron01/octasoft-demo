<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

  /**
   * @param array $get
   * @param bool $flag
   * @return array|\Doctrine\ORM\Query
   */
  public function ajaxTable(array $get, $flag = false){

    /* Indexed column (used for fast and accurate table cardinality) */
    $alias = 'a';

    /* DB table to use */
    $tableObjectName = 'AppBundle:User';

    /**
     * Set to default
     */
    if(!isset($get['fields']) || empty($get['fields']))
      $get['fields'] = array('id');

    $aColumns = array();
    foreach($get['fields'] as $value) $aColumns[] = $alias .'.'. $value;

    $cb = $this->getEntityManager()
      ->getRepository($tableObjectName)
      ->createQueryBuilder($alias)
      ->select(str_replace(" , ", " ", implode(", ", $aColumns)));

    if ( isset( $get['start'] ) && $get['length'] != '-1' ){
      $cb->setFirstResult( intval($get['start']) )
        ->setMaxResults( intval ($get['length'] ) );
    }

/*    if ( isset( $get['iDisplayStart'] ) && $get['iDisplayLength'] != '-1' ){
      $cb->setFirstResult( (int)$get['iDisplayStart'] )
        ->setMaxResults( (int)$get['iDisplayLength'] );
    }*/

    /*
     * Ordering
     */
    if ( isset( $get['sortCol_0'] ) ){
      for ( $i=0 ; $i<intval( $get['sortingCols'] ) ; $i++ ){
        if ( $get[ 'sortable_'.intval($get['sortCol_'.$i]) ] == "true" ){
          $cb->orderBy($aColumns[ (int)$get['sortCol_'.$i] ], $get['sSortDir_'.$i]);
        }
      }
    }

    /*
       * Filtering
       * NOTE this does not match the built-in DataTables filtering which does it
       * word by word on any field. It's possible to do here, but concerned about efficiency
       * on very large tables, and MySQL's regex functionality is very limited
       */
    if ( isset($get['search']['value']) && $get['search']['value'] != '' ){
      $aLike = array();
      for ( $i=0 ; $i<count($aColumns) ; $i++ ){
        if ( isset($get['columns'][$i]['searchable']) && $get['columns'][$i]['searchable'] == "true" ){
          $aLike[] = $cb->expr()->like($aColumns[$i], '\'%'. $get['search']['value'] .'%\'');
        }
      }
      if(count($aLike) > 0) $cb->andWhere(new Expr\Orx($aLike));
      else unset($aLike);
    }

    /*
     * SQL queries
     * Get data to display
     */
    $query = $cb->getQuery();

    if($flag)
      return $query;
    else
      return $query->getResult();
  }

  /**
   * @return int
   */
  public function getCount(){
    $aResultTotal = $this->getEntityManager()
      ->createQuery('SELECT COUNT(a) FROM AppBundle:User a')
      ->setMaxResults(1)
      ->getResult();
     return $aResultTotal[0][1];
  }

}